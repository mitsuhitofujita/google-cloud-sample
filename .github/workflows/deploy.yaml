name: Deploy to Google Cloud

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

env:
  GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
  GOOGLE_CLOUD_PROJECT_NUMBER: ${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}
  GOOGLE_CLOUD_REGION: ${{ secrets.GOOGLE_CLOUD_REGION }}
  DEPLOYER_SERVICE_ACCOUNT_NAME: ${{ secrets.DEPLOYER_SERVICE_ACCOUNT_NAME }}
  DEPLOYER_SERVICE_ACCOUNT_EMAIL: ${{ secrets.DEPLOYER_SERVICE_ACCOUNT_NAME }}@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com
  WORKLOAD_IDENTITY_POOL_ID: ${{ secrets.WORKLOAD_IDENTITY_POOL_ID }}
  WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
  ARTIFACT_REGISTRY_REPOSITORY: ${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }}
  WEB_APP_IMAGE_NAME: ${{ secrets.WEB_APP_IMAGE_NAME }}
  CLOUD_RUN_SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
  RUNNER_SERVICE_ACCOUNT_NAME: ${{ secrets.RUNNER_SERVICE_ACCOUNT_NAME }}
  RUNNER_SERVICE_ACCOUNT_EMAIL: ${{ secrets.RUNNER_SERVICE_ACCOUNT_NAME }}@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ env.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ env.DEPLOYER_SERVICE_ACCOUNT_EMAIL }}'
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GOOGLE_CLOUD_PROJECT_ID }}
      
      - name: Verify OIDC connection
        run: |
          echo "OIDC connection established successfully!"
          
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GOOGLE_CLOUD_REGION }}-docker.pkg.dev
      
      - name: Build Docker image
        run: |
          docker build \
            --build-arg VITE_GOOGLE_CLIENT_ID="${{ env.VITE_GOOGLE_CLIENT_ID }}" \
            -t ${{ env.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.WEB_APP_IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.WEB_APP_IMAGE_NAME }}:${{ github.sha }} \
            ${{ env.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.WEB_APP_IMAGE_NAME }}:latest
            
      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.WEB_APP_IMAGE_NAME }}:${{ github.sha }}
      
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE }} \
            --image=${{ env.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.WEB_APP_IMAGE_NAME }}:${{ github.sha }} \
            --region=${{ env.GOOGLE_CLOUD_REGION }} \
            --platform=managed \
            --port=8080 \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=1 \
            --cpu=1 \
            --memory=512Mi \
            --timeout=300 \
            --service-account=${{ env.RUNNER_SERVICE_ACCOUNT_EMAIL }} \
            --set-env-vars="GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }},JWT_SECRET=${{ env.JWT_SECRET }},NODE_ENV=production"
      
      - name: Get Cloud Run service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.CLOUD_RUN_SERVICE }} \
            --region=${{ env.GOOGLE_CLOUD_REGION }} \
            --format="value(status.url)")
          
          echo "Service deployed successfully! üéâ"
          echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_ENV
      
      - name: Test deployment
        id: health_check
        run: |
          echo "Testing deployment..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "${SERVICE_URL}/api/ping")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed with status code: $response"
            exit 1
          fi
      
      - name: Tag stable release
        if: success() && steps.health_check.outcome == 'success'
        run: |
          echo "Tagging image as stable..."
          gcloud artifacts docker tags add \
            ${{ env.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.WEB_APP_IMAGE_NAME }}:${{ github.sha }} \
            ${{ env.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.WEB_APP_IMAGE_NAME }}:stable
          
          echo "‚úÖ Successfully tagged image as stable"
